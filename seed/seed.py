from sqlalchemy.orm import Session
from config.db import SessionLocal
from passlib.context import CryptContext
from faker import Faker
import random
from datetime import datetime, timedelta
from models.usersModel import User
from models.productsModel import Product
from models.interactionModel import Interaccion
from models.commentModel import Comment
from models.cartModel import Cart
from schemas.productSchemas import StatusProducto

pwd_context = CryptContext(schemes=["bcrypt"], deprecated="auto")


class Seeder:
    def __init__(self):
        self.db = SessionLocal()
        self.faker = Faker("es_ES")
        self.batch_size = 200

        # Diccionario de productos ecol√≥gicos
        self.PRODUCTOS_POR_CATEGORIA = {
            "Alimentos": {
                "productos": [
                    "Pan integral", "Leche de almendras", "Miel pura", "Chocolate negro",
                    "Caf√©", "Galletas de avena", "Aceite de oliva", "Quinoa",
                    "Pasta de trigo duro"
                ],
                "materiales": ["org√°nico", "vegano", "artesanal"],
                "carbon_footprint_range": (0.5, 5.0),
                "sufijos": ["(Pack familiar)", "(Sin aditivos)", "(Energ√©tico)"]
            },
            "Ropa": {
                "productos": [
                    "Camiseta b√°sica", "Pantal√≥n", "Vestido largo", "Chaqueta",
                    "Calcetines", "Bragas t√©rmicas", "Jersey", "Sombrero"
                ],
                "materiales": ["algod√≥n org√°nico", "bamb√∫", "lino reciclado", "Piel"],
                "carbon_footprint_range": (5.0, 25.0),
                "sufijos": ["(Edici√≥n limitada)", "(Talla √©tica)", "(Pack 3 u.)"]
            },
            "Limpieza": {
                "productos": [
                    "Jab√≥n", "Detergente en pastilla", "Limpiador multiusos", "Suavizante",
                    "Desinfectante natural", "Esponja vegetal", "Cepillo de madera", "Bolsa de lavado"
                ],
                "materiales": ["biodegradable", "org√°nico", "Sin quimicos"],
                "carbon_footprint_range": (1.0, 8.0),
                "sufijos": ["(Zero waste)", "(Sin fragancia)", "(Concentrado)"]
            },
            "Tecnologia": {
                "productos": [
                    "Cargador solar", "Auriculares inal√°mbricos", "Power bank", "Fundas para m√≥vil",
                    "Tablet", "Teclado ergon√≥mico", "Rat√≥n de bamb√∫", "Altavoz port√°til"
                ],
                "materiales": ["energ√≠a solar", "pl√°stico reciclado", "metales reciclados"],
                "carbon_footprint_range": (10.0, 50.0),
                "sufijos": ["(Eficiencia A+)", "(Reparable)", "(Modular)"]
            },
            "Hogar": {
                "productos": ["Vela arom√°tica", "Taza", "Tabla de cortar", "Repisa"],
                "materiales": ["cera", "plastico reciclado"],
                "carbon_footprint_range": (3.0, 20.0),
                "sufijos": ["(Hecho a mano)", "(Dise√±o circular)"]
            },
            "Salud": {
                "productos": [
                    "Crema facial", "Protector solar", "Aceite para masaje", "Jab√≥n √≠ntimo",
                    "Suplemento vitam√≠nico", "Desodorante ", "Cepillo de dientes", "Hilo dental"
                ],
                "materiales": ["a base de ingredientes naturales", "sin quimicos", "org√°nico"],
                "carbon_footprint_range": (2.0, 12.0),
                "sufijos": ["(Dermatol√≥gico)", "(Sin fragancia)"]
            },
            "Papeleria": {
                "productos": [
                    "Cuaderno anillado", "Bol√≠grafo recargable", "Carpeta archivador", "Sobre kraft",
                    "Postales ilustradas", "Bloc de notas", "Agenda anual", "L√°pices de colores"
                ],
                "materiales": ["papel semilla", "cart√≥n reciclado", "tinta vegetal"],
                "carbon_footprint_range": (1.5, 6.0),
                "sufijos": ["(Plantable)", "(100% reciclado)"]
            },
            "Otro": {
                "productos": [
                    "Kit de jardiner√≠a", "Juego de cubiertos", "Decoraci√≥n mural", "Caja regalo",
                    "Bolsa de tela", "Velas decorativas", "Portal√°pices", "Reloj de pared"
                ],
                "materiales": ["upcycled", "hecho a mano", "materiales mixtos"],
                "carbon_footprint_range": (2.0, 15.0),
                "sufijos": ["(Multiusos)", "(Personalizable)"]
            },
        }

    def generar_producto_ecologico(self, user_ids):
        categoria = random.choice(list(self.PRODUCTOS_POR_CATEGORIA.keys()))
        datos = self.PRODUCTOS_POR_CATEGORIA[categoria]
        nombre = f"{random.choice(datos['productos'])} de {random.choice(datos['materiales'])} {random.choice(datos['sufijos'])}"
        carbon_footprint = round(random.uniform(*datos["carbon_footprint_range"]), 2)

        # Status aleatorio entre disponible y agotado (m√°s probabilidad disponible)
        status = random.choices(
            [StatusProducto.disponible.value, StatusProducto.agotado.value],
            weights=[0.8, 0.2],
            k=1,
        )[0]

        return Product(
            name=nombre[:255],
            category=categoria[:100],
            carbon_footprint=carbon_footprint,
            recyclable_packaging=random.random() > 0.3,
            local_origin=random.random() > 0.6,
            image_url=f"https://res.cloudinary.com/ecoapp/image/{categoria.lower()}/{random.randint(1,50)}.jpg"[:500],
            price=round(random.uniform(5.0, 200.0), 2),
            quantity=random.randint(1, 100),
            status=status,
            created_by=random.choice(user_ids),
        )

    def run(self, total_records=1000000):
        try:
            num_users = 150000
            num_products = 150000
            num_comments = 300000
            num_interactions = 400000
            num_carts = 200000

            # 1. Usuarios
            print(f"üîπ Creando {num_users} usuarios...")
            for i in range(0, num_users, self.batch_size):
                batch = []
                for _ in range(min(self.batch_size, num_users - i)):
                    gender = random.choice(["male", "female"])
                    first_name = (
                        self.faker.first_name_male()
                        if gender == "male"
                        else self.faker.first_name_female()
                    )

                    batch.append(
                        User(
                            username=f"{first_name.lower()}{random.randint(10,99)}"[:50],
                            email=f"{first_name.lower()}.{self.faker.last_name().lower()}@gmail.com"[
                                :100
                            ],
                            password=self.hash_password("123456"),
                            profile_picture=f"https://randomuser.me/api/portraits/{'men' if gender == 'male' else 'women'}/{random.randint(1,99)}.jpg"[
                                :255
                            ],
                            status="active" if random.random() > 0.3 else "inactive",
                            registration_date=datetime.now()
                            - timedelta(days=random.randint(0, 365)),
                        )
                    )
                self.db.bulk_save_objects(batch)
                self.db.commit()
                print(f"‚úÖ Usuarios {i+1}-{i+len(batch)} creados")

            # Obtener IDs de usuarios
            user_ids = [id[0] for id in self.db.query(User.id).yield_per(1000)]

            # 2. Productos
            print(f"\nüîπ Creando {num_products} productos...")
            for i in range(0, num_products, self.batch_size):
                batch = [
                    self.generar_producto_ecologico(user_ids)
                    for _ in range(min(self.batch_size, num_products - i))
                ]
                self.db.bulk_save_objects(batch)
                self.db.commit()
                print(f"‚úÖ Productos {i+1}-{i+len(batch)} creados")

            # Obtener productos y sus IDs
            products = self.db.query(Product).all()
            product_ids = [p.id for p in products]

            # 3. Comentarios
            print(f"\nüîπ Creando {num_comments} comentarios...")
            opiniones = [
            "Excelente producto, muy recomendable.",
            "Me encant√≥, volver√≠a a comprarlo.",
            "Buena relaci√≥n calidad-precio.",
            "No era lo que esperaba, pero funciona.",
            "Empaque ecol√≥gico, muy bien.",
            "Lo recib√≠ a tiempo y en buen estado.",
            "Podr√≠a mejorar, pero cumple su funci√≥n.",
            "Estoy satisfecho con la compra.",
            "Muy √∫til para reducir mi consumo de pl√°stico.",
            "El empaque es completamente reciclable, me encanta.",
            "Buena iniciativa, excelente para el planeta.",
            "Materiales de muy buena calidad y ecol√≥gicos.",
            "Me gusta apoyar marcas conscientes.",
            "Funciona igual que uno convencional pero sin da√±ar el ambiente.",
            "Ideal para regalar a alguien que se preocupa por el medio ambiente.",
            "Producto natural, sin qu√≠micos innecesarios.",
            "Muy buena opci√≥n para quienes buscan alternativas sustentables.",
            "Recomiendo 100%, vale la pena cambiar a esto.",
            "Perfecto para quienes buscan alternativas sostenibles.",
            "El producto lleg√≥ en empaques reciclables, muy bien.",
            "Incre√≠ble lo c√≥modo y ecol√≥gico que es.",
            "Cumple su funci√≥n sin generar residuos.",
            "Una excelente forma de aportar al medio ambiente.",
            "Ya es parte de mi d√≠a a d√≠a, muy √∫til.",
            "Lo volver√≠a a comprar sin dudarlo.",
            "Es suave, duradero y sobre todo ecol√≥gico.",
            "Me ayud√≥ a reducir mi basura en casa.",
            "Ideal para hogares sostenibles.",
            "Ayuda a reducir la huella de carbono.",
            "F√°cil de usar y muy eficiente.",
            "Recomendado para familias que reciclan.",
            "Un producto responsable con el planeta.",
            "Me encanta su dise√±o natural.",
            "No pens√© que funcionara tan bien siendo ecol√≥gico.",
            "Definitivamente voy a seguir comprando esta marca.",
            "Aporta a mi estilo de vida consciente.",
            "Funciona mejor que muchos productos industriales.",
            "Me sorprendi√≥ la calidad y su impacto positivo.",
            "Mis hijos tambi√©n lo usan, es muy seguro.",
            "Una gran inversi√≥n para el futuro.",
            "Se siente bien saber que consumo responsablemente.",
            "Sustitu√≠ el producto anterior por este y no me arrepiento.",
            "Lo uso todos los d√≠as y no se desgasta.",
            "Gran relaci√≥n calidad-precio y eco-friendly.",
            "La textura natural es incre√≠ble.",
            "Mis amigos tambi√©n lo compraron tras probarlo.",
            "Huele delicioso y es 100% natural.",
            "Nunca hab√≠a encontrado algo tan ecol√≥gico y √∫til."
            ]
            for i in range(0, num_comments, self.batch_size):
                batch = [
                    Comment(
                        user_id=random.choice(user_ids),
                        product_id=random.choice(product_ids),
                        content=random.choice(opiniones)[:500],
                    )
                    for _ in range(min(self.batch_size, num_comments - i))
                ]
                self.db.bulk_save_objects(batch)
                self.db.commit()
                print(f"‚úÖ Comentarios {i+1}-{i+len(batch)} creados")

            # 4. Interacciones
            print(f"\nüîπ Creando {num_interactions} interacciones...")
            for i in range(0, num_interactions, self.batch_size):
                batch = [
                    Interaccion(
                        user_id=random.choice(user_ids),
                        product_id=random.choice(product_ids),
                        interaction=random.randint(1, 3),
                    )
                    for _ in range(min(self.batch_size, num_interactions - i))
                ]
                self.db.bulk_save_objects(batch)
                self.db.commit()
                print(f"‚úÖ Interacciones {i+1}-{i+len(batch)} creados")

            # 5. Carritos
            print(f"\nüîπ Creando {num_carts} carritos...")
            valid_products = [p for p in products if p.status != StatusProducto.agotado.value]

            for i in range(0, num_carts, self.batch_size):
                batch = []
                for _ in range(min(self.batch_size, num_carts - i)):
                    user_id = random.choice(user_ids)
                    product = random.choice(valid_products)

                    # evitar que un usuario compre su propio producto
                    while product.created_by == user_id:
                        product = random.choice(valid_products)

                    batch.append(
                        Cart(
                            user_id=user_id,
                            product_id=product.id,
                            quantity=random.randint(1, 5),
                        )
                    )

                self.db.bulk_save_objects(batch)
                self.db.commit()
                print(f"‚úÖ Carritos {i+1}-{i+len(batch)} creados")

            print(f"\nüéâ Seeder completado exitosamente!")
            print(
                f"Total registros creados: {num_users + num_products + num_comments + num_interactions + num_carts}"
            )

        except Exception as e:
            self.db.rollback()
            print(f"\n‚ùå Error cr√≠tico: {str(e)}")
            raise
        finally:
            self.db.close()

    def hash_password(self, password: str) -> str:
        return pwd_context.hash(password)
